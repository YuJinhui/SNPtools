#!/usr/bin/env perl
use strict;
use warnings;
use feature 'say';
use CoverageDB::Main;

my $schema = CoverageDB::Main->connect('dbi:SQLite:db/coverage.db');


my $sam_gap_cmd = "samtools mpileup test/test.bam | cut -f1-2,4";
my $sam_nogap_cmd = "samtools depth test/test.bam";

my $flank_dist = 8;

my %cov_pos;
my @chromosomes =
  qw( SL2.40ch01 SL2.40ch02 SL2.40ch03 SL2.40ch04 SL2.40ch05 SL2.40ch06 SL2.40ch07 SL2.40ch08 SL2.40ch09 SL2.40ch10 );

for (@chromosomes) {
    add_positions($_);
}

sub add_positions {
    my $chr = shift;
    open my $snps_fh, "<", "../genotyping/snp_master/polyDB.$chr.nr";
    <$snps_fh>;
    while ( <$snps_fh> ) {
        my $snp_pos = [ split /\t/ ]->[1];
        $cov_pos{$chr}{$snp_pos} = 1;
        $cov_pos{$chr}{$snp_pos - $flank_dist} = 1;
        $cov_pos{$chr}{$snp_pos + $flank_dist} = 1;
    }
    close $snps_fh;
    say scalar keys %cov_pos;
    say scalar keys $cov_pos{$chr};
}

# __END__

# my %cov_pos = (
#     'SL2.40ch01' => {
#         40 => 1,
#         50 => 1,
#         67 => 1,
#         },
#     'SL2.40ch02' => {
#         49914000 => 1,
#         49914008 => 1,
#         49914019 => 1,
#         },
# );


open my $gap_fh, "-|", $sam_gap_cmd;
open my $nogap_fh, "-|", $sam_nogap_cmd;
my $sample_id = "test";
my $count = 1;
my @cov_data;
while ( my $gap_line = <$gap_fh> ) {
    my $nogap_line = <$nogap_fh>;
    chomp( $gap_line, $nogap_line );
    my ( $chr, $pos, $gap_cov ) = split /\t/, $gap_line;
    my $nogap_cov = [ split /\t/, $nogap_line ]->[2];

    if ( exists $cov_pos{$chr}{$pos} ) {
        $count++;
        push @cov_data, [ $sample_id, $chr, $pos, $gap_cov, $nogap_cov ];
        # say "$chr - $pos";
    }


    populate_and_reset() if $count % 100000 == 0;

    # $schema->populate(
    #     'Coverage',
    #     [
    #         [qw/sample_id chromosome position gap_cov nogap_cov/],
    #         [ $sample_id, $chr, $pos, $gap_cov, $nogap_cov ]
    #     ]
    # );
    # last if $chr eq "SL2.40ch02";
}
close $gap_fh;
close $nogap_fh;

populate_and_reset() if scalar @cov_data;

sub populate_and_reset {
    say $count++;
    $schema->populate(
        'Coverage',
        [
            [qw/sample_id chromosome position gap_cov nogap_cov/],
            @cov_data
        ]
    );
    @cov_data = ();
}

say $count;
__END__
$schema->populate(
    'Coverage',
    [
        [qw/sample_id chromosome position gap_cov nogap_cov/],
        [ 'test', 'SL2.40ch01', 1051, 50, 5 ]
    ]
);


$schema->populate(
    'Coverage',
    [
        [qw/sample_id chromosome position gap_cov nogap_cov/],
        [ 'test', 'SL2.40ch01', 1061, 66, 6 ]
    ]
);


$schema->populate(
    'Coverage',
    [
        [qw/sample_id chromosome position gap_cov nogap_cov/],
        [ 'test', 'SL2.40ch02', 1061, 66, 6 ]
    ]
);

__END__
#  here's some of the SQL that is going to be generated by the schema
#  INSERT INTO artist VALUES (NULL,'Michael Jackson');
#  INSERT INTO artist VALUES (NULL,'Eminem');

my @artists = ( ['Michael Jackson'], ['Eminem'] );
$schema->populate( 'Artist', [ [qw/name/], @artists, ] );

my %albums = (
    'Thriller'                => 'Michael Jackson',
    'Bad'                     => 'Michael Jackson',
    'The Marshall Mathers LP' => 'Eminem',
);

my @cds;
foreach my $lp ( keys %albums ) {
    my $artist = $schema->resultset('Artist')->find( { name => $albums{$lp} } );
    push @cds, [ $lp, $artist->id ];
}

$schema->populate( 'Cd', [ [qw/title artist/], @cds, ] );

my %tracks = (
    'Beat It'         => 'Thriller',
    'Billie Jean'     => 'Thriller',
    'Dirty Diana'     => 'Bad',
    'Smooth Criminal' => 'Bad',
    'Leave Me Alone'  => 'Bad',
    'Stan'            => 'The Marshall Mathers LP',
    'The Way I Am'    => 'The Marshall Mathers LP',
);

my @tracks;
foreach my $track ( keys %tracks ) {
    my $cdname =
      $schema->resultset('Cd')->find( { title => $tracks{$track}, } );
    push @tracks, [ $cdname->id, $track ];
}

$schema->populate( 'Track', [ [qw/cd title/], @tracks, ] );
